class Solution {
public:
    /*vector<int> arrayRankTransform(vector<int>& arr) {
        if (arr.empty()) return arr;

        set<int> st(arr.begin(), arr.end());
        unordered_map<int, int> hmap;

        set<int>::iterator itr;
        int i = 0;
        for (itr = st.begin(); itr != st.end(); itr++) {
            if (!hmap.contains(*itr)){
                hmap[*itr] = i+1;
                i++;
            }
            else continue;
        }

        for (i = 0; i<arr.size(); i++){
            arr[i] = hmap[arr[i]];
        }

        return arr;
    }*/

    //Further optimised version
    vector<int> arrayRankTransform(vector<int>& arr) {
        if (arr.empty()) return arr;
        
        vector<int> temp = arr;
        sort(temp.begin(), temp.end());
        temp.erase(unique(temp.begin(), temp.end()), temp.end());
        
        unordered_map<int, int> hmap;
        for (int i = 0; i < temp.size(); ++i) {
            hmap[temp[i]] = i + 1;
        }

        for (int i = 0; i < arr.size(); ++i) {
            arr[i] = hmap[arr[i]];
        }

        return arr;
    }
};

static const auto kds = []() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    return 0;
}();
